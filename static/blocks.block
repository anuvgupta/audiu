    *

// app blocks blockfile

// custom blocks
!break
    init
        {
            return Block('span').add('br');
        }
    load
        {
            data('val', val => {
                for (var i = 1; i < val; i++)
                    block.add('br');
            });
        }
!text
    init
        {
            return Block('span');
        }
    load
        {
            data('val', val => {
                block.node().appendChild(document.createTextNode(val));
            });
            data('html', html => {
                block.html(html);
            });
        }
!image
    init
        {
            return Block('div');
        }
    load
        {
            var src = data('src');
            var height = data('height');
            var width = data('width');
            var alt = data('alt');
            if (src != null) {
                block.css('background-image', "url('" + src + "')")
                    .css('background-repeat', 'no-repeat')
                    .css('background-size', 'contain')
                ;
            }
            if (height !== null) block.css('height', height);
            if (width !== null) block.css('width', width);
            if (alt !== null) block.attribute('title', alt);
        }
!switch
    init
        {
            var block;
            block = Block('div')
                .key('state', false)
                .css({
                    width: 'auto',
                    height: '30px',
                    cursor: 'pointer',
                    margin: '5px 10px',
                    fontSize: '17px',
                })
                .add(Block('block', 'label')
                    .css({
                        width: 'auto',
                        minWidth: '70px',
                        float: 'left',
                        marginRight: '10px',
                        cursor: 'inherit',
                        fontSize: 'inherit',
                        display: 'none'
                    })
                    .__child('content')
                        .css('text-align', 'left')
                        .__parent()
                    .add(Block('text', 1)
                        .data('Label 1: ')
                    )
                    .on('click', (e, b, d) => {
                        if (block.key('enabled')) {
                            block.key('state', (!block.key('state')));
                            block.on('modified');
                        }
                    })
                )
                .add(Block('div', 'main')
                    .css({
                        width: '65px',
                        height: '100%',
                        position: 'relative',
                        cursor: 'inherit',
                        display: 'inline-block'
                    })
                    .add(Block('div', 'bg')
                        .css({
                            width: '100%',
                            height: '100%',
                            borderRadius: '16px',
                            backgroundColor: '#e4e4e4',
                            position: 'absolute',
                            top: '0',
                            left: '0',
                            zIndex: '1',
                            transition: 'background-color 0.2s ease-in-out'
                        })
                    )
                    .add(Block('block', 'circle')
                        .css({
                            width: '30px',
                            height: '100%',
                            position: 'absolute',
                            top: '0.25px', // 0.5px
                            left: '1px',
                            zIndex: '2',
                            transition: 'left 0.2s ease-in-out'
                        })
                        .add(Block('div')
                            .css({
                                width: '75%',
                                height: '75%',
                                borderRadius: '100%',
                                backgroundColor: 'white',
                                margin: '0 auto'
                            })
                        )
                    )
                    .on('click', (e, b, d) => {
                        if (block.key('enabled')) {
                            block.key('state', (!block.key('state')));
                            block.on('modified');
                        }
                    })
                )
                .on('updateUI', (e, b, d) => {
                    if (block.key('state')) {
                        block.child('main/circle').css({
                            left: '34px'
                        }).sibling('bg').css({
                            backgroundColor: '#558fed'
                        });
                    } else {
                        block.child('main/circle').css({
                            left: '1px',
                        }).sibling('bg').css({
                            backgroundColor: '#e4e4e4'
                        });
                    }
                })
                .on('modified', (e, b, d) => {
                    block.on('updateUI');
                })
                .key('enabled', true)
                .on('enable', (e, b, d) => {
                    block.key('enabled', true);
                    block.css({
                        opacity: '1',
                        cursor: 'pointer'
                    });
                    e.stopPropagation();
                })
                .on('disable', (e, b, d) => {
                    block.key('enabled', false);
                    block.css({
                        opacity: '0.6',
                        cursor: 'default'
                    });
                    e.stopPropagation();
                })
            ;
            return block;
        }
    load
        {
            data('val', (val) => {
                var v = (val == 'on');
                if (block.key('state') != v) {
                    block.key('state', v);
                    block.on('modified', { locked: true });
                }
            });
            data('label', (label) => {
                block.child('label/text').html('').data(label);
                block.child('label').css('display', 'inline-table');
            });
        }

// app-specific blocks
!genre-bubble
    init
        {
            var block = Block('div');
            var activeColor = '#3a3a3a';
            var inactiveColor = '#141414';
            block
                .class('genre-bubble')
                .css({
                    width: 'auto',
                    height: '50px',
                    margin: '4px 5px'
                })
                .add(Block('button', 1)
                    .html('genre')
                    .class(!util.mobileAndTablet() ? 'mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--colored' : 'styled-like-mdl')
                    .css({
                        width: '100%',
                        height: '100%',
                        backgroundColor: inactiveColor,
                        fontSize: '13px',
                        letterSpacing: '1px',
                        borderRadius: '3px',
                        opacity: '0.9',
                        color: 'white',
                        outline: 'none',
                        padding: '0px 20px'
                    })
                    .key('active', 'no')
                    .on('click', (e, b, d) => {
                        var active = b.key('active');
                        if (active == 'no') {
                            b.css('background-color', activeColor);
                            b.key('active', 'yes')
                        } else if (active == 'yes') {
                            b.css('background-color', inactiveColor);
                            b.key('active', 'no')
                        }
                    })
                )
            ;
            return block;
        }
    load
        {
            data('text', text => {
                block.key('text', text);
                block.child('button').html('').html(text);
            });
            data('slug', slug => {
                block.key('slug', slug);
            });
        }
!sp-track-view
    init
        {
            var h = 130;
            var sp = 12;
            var of = 8;
            var block = Block('div');
            block
                .css({
                    width: '100%',
                    height: h + 'px',
                    boxSizing: 'border-box',
                    borderBottom: '1px solid #1e1e1e',
                    position: 'relative'
                })
                .add(Block('div', 'cover_art')
                    .css({
                        height: h + 'px',
                        width: h + 'px',
                        position: 'absolute',
                        top: '0',
                        bottom: '0',
                    })
                    .add(Block('image', 'cover_art_img')
                        .data({
                            height: h + 'px',
                            width: h + 'px',
                            src: '/img/default_cover.png',
                            css: {
                                position: 'absolute',
                                top: '0',
                                left: '0',
                                zIndex: '1'
                            }
                        })
                    )
                    .add(Block('block', 'player')
                        .css({
                            position: 'absolute',
                            top: '0',
                            left: '0',
                            zIndex: '2'
                        })
                        .add(Block('audio', 'audio_player')
                            .css({
                                position: 'absolute',
                                top: '0',
                                left: '0'
                            })
                        )
                        .key('playing', 'false')
                        .add(Block('button', 'play_button')
                            .css({
                                height: '50px',
                                width: '50px',
                                backgroundColor: 'rgba(240,240,240,0)',
                                border: '1px solid rgba(240,240,240,0)',
                                cursor: 'pointer',
                                opacity: '0.3',
                                transition: 'opacity 0.2s ease',
                                outline: 'none'
                            })
                            .add(Block('block', 'content')
                                .add(Block('image', 1)
                                    .data({
                                        height: '40px',
                                        width: '40px',
                                        src: '/img/play_w.png',
                                        css: { position: 'relative', left: '-3px' }
                                    })
                                )
                            )
                            .on('mouseover', (e, b, d) => {
                                b.css('opacity', '1');
                            })
                            .on('mouseout', (e, b, d) => {
                                b.css('opacity', '0.4');
                            })
                            .on('click', (e, b, d) => {
                                if (!d.hasOwnProperty('automated') || d.automated == false) {
                                    block.parent().on('pause_all_tracks', { except: block.mark() });
                                }
                                //setTimeout(_ => {
                                    var playing = b.parent().key('playing');
                                    if (playing == 'true') {
                                        b.sibling('audio_player').node().pause();
                                        b.child('content/image').data({ src: '/img/play_w.png' });
                                        playing = 'false';
                                    } else {
                                        b.sibling('audio_player').node().play();
                                        b.child('content/image').data({ src: '/img/stop_w.png' });
                                        playing = 'true';
                                    }
                                    b.parent().key('playing', playing);
                                //}, 20);
                            })
                        )
                    )
                )
                .add(Block('div', 'name')
                    .css({
                        position: 'absolute',
                        top: '0',
                        right: '0',
                        height: (h/2 - sp/2 - of) + 'px',
                        width: 'calc(100% - ' + h + 'px)',
                        textAlign: 'left',
                        display: 'flex',
                        boxSizing: 'border-box',
                        paddingLeft: '35px'
                    })
                    .add(Block('text', 'text')
                        .data('Track Title')
                        .css({
                            alignSelf: 'flex-end',
                            color: 'white',
                            fontSize: '22px',
                            letterSpacing: '1.2px'
                        })
                    )
                )
                .add(Block('div', 'details')
                    .css({
                        position: 'absolute',
                        bottom: '0',
                        right: '0',
                        height: (h/2 - sp/2 + of) + 'px',
                        width: 'calc(100% - ' + h + 'px)',
                        textAlign: 'left',
                        boxSizing: 'border-box',
                        paddingLeft: '35px'
                    })
                    .add(Block('text', 'artist')
                        .data('Track Artist(s)')
                        .css({
                            color: 'white',
                            fontSize: '16px',
                            letterSpacing: '1px'
                        })
                    )
                    .add(Block('div')
                        .css('height', '2px')
                    )
                    .add(Block('text', 'album')
                        .data('Track Album Name')
                        .css({
                            color: 'white',
                            fontSize: '12px',
                            letterSpacing: '0.8px',
                            fontWeight: '200',
                            fontStyle: 'italic'
                        })
                    )
                )
                .add(Block('block', 'launch')
                    .css({
                        position: 'absolute',
                        right: '0',
                        top: '0',
                        height: h + 'px',
                        width: (h - 20) + 'px'
                    })
                    .add(Block('button', 'img_btn')
                        .css({
                            height: (h/2) + 'px',
                            width: (h/2) + 'px',
                            borderRadius: '100%',
                            backgroundColor: '#252525',
                            border: '1px solid #272727',
                            transition: 'opacity 0.2s ease',
                            opacity: '1',
                            outline: 'none'
                        })
                        .add(Block('a', 'link')
                            .attribute('target', '_blank')
                            .attribute('href', '#')
                            .add(Block('block', 'content')
                                .add(Block('image', 1)
                                    .data({
                                        height: '28px',
                                        width: '28px',
                                        src: 'img/launch_w.png',
                                        css: { margin: '0 auto', opacity: '0.8' }
                                    })
                                )
                            )
                        )
                        .on('mouseover', (e, b, d) => {
                            b.css('opacity', '0.8');
                        })
                        .on('mouseout', (e, b, d) => {
                            b.css('opacity', '1');
                        })
                    )
                )
            ;
            return block;
        }
    load
        {
            data('id', id => {
                block.key('id', id);
            });
            data('name', name => {
                block.key('name', name);
                block.child('name/text').html('').data(name);
            });
            data('artist', artist => {
                block.key('artist', artist);
                block.child('details/artist').html('').data(artist);
            });
            data('album', album => {
                block.key('album', album);
                block.child('details/album').html('').data(album);
            });
            data('link', link => {
                block.key('link', link);
                if (link == '' || link == null) {
                    block.child('launch/img_btn').css('display', 'none');
                } else {
                    //block.child('launch/img_btn').css('display', 'block');
                    block.child('launch/img_btn/link').attribute('href', link);
                }
            });
            data('cover_art', cover_art => {
                block.key('cover_art', cover_art);
                if (cover_art != '' && cover_art != null) {
                    block.child('cover_art/cover_art_img').data({
                        'src': cover_art
                    });
                }
            });
            data('preview', preview => {
                block.key('preview', preview);
                if (preview != '' && preview != null) {
                    block.child('cover_art/player/audio_player')
                        .add(Block('source', 'audio_source')
                            .attribute('type', 'audio/mpeg')
                            .attribute('src', `${preview}`)
                        )
                        //.attribute('controls', 'controls')
                    ;
                } else {
                    block.child('cover_art/player').css('display', 'none');
                }
            });
        }