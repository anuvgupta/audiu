    *

// app main blockfile

// app UI layer
app
    id app
    css
        opacity 0
        transition opacity 0.4s
        width 100%
        height 100%
        margin 0 auto
        box-sizing border-box
        position absolute
        top 0
        left 0

    :ready
        {
            console.log('[block] ready');
        }

    #target_run_id
        {
            block.child('main/content/model_form')
                .child('page1').on('hide')
                .sibling('page2').on('hide')
                .sibling('page3').on('hide')
                .sibling('page4').on('hide')
                .sibling('results').on('show')
                    .data({  target_run_id: target_run_id  })
            ;
        }
    
    #run_complete
        {
            if (app.main.config.target_run_id != "" && run_complete.trim() == app.main.config.target_run_id.trim()) {
                var new_loc = `/fresh?r=${app.main.config.target_run_id}`;
                setTimeout(_ => {
                    util.redirect(new_loc);
                }, 500);
            }
        }

    #update_readme
        {
            block.child('main/modal/modal_content').data({
                raw_html: update_readme
            });
        }

    #genre_form_select_mode
        {
            block.child('main/content/model_form/page2').data({
                genre_form_select_mode: genre_form_select_mode
            });
        }

    {
        if (!app.main.config.target_run_id || app.main.config.target_run_id == '') {
            window.history.replaceState({
                origin: `${window.location.origin}`,
                form_stage: 1,
                //run_id: app.main.config.target_run_id
            }, "", `${window.location.href}`);
        }
        window.onpopstate = (event) => {
            //alert("location: " + document.location + ", state: " + JSON.stringify(event.state));
            //const url_params = new URLSearchParams(window.location.search);
            //console.log(url_params);
            if (event.state.hasOwnProperty('form_stage')) {
                var target_form_stage = event.state.form_stage;
                var pages = block.child('main/content/model_form').children();
                for (var p in pages) {
                    var page_view = pages[p];
                    if (page_view.mark() != `page${target_form_stage}`) {
                        page_view.on('hide');
                    }
                }
                block.child(`main/content/model_form/page${target_form_stage}`).on('show');
            }
        }
    }

    div background
        css
            z-index -5
            position absolute
            top 0
            left 0
            width 100%
            height 100%
            box-sizing border-box
            margin 0
            padding 0
            //background-image url(img/gear_bg.jpg)
            background-position top right
            background-size auto
            background-repeat repeat
            background-attachment fixed
            opacity 0.4
        div particles-js
            id particles-js
            css
                width 100%
                height 100%

    div main
        css
            //display none
            height 100%
            width 100%
            overflow-y auto
            overflow-x hidden
        div content
            css
                text-align center
            div spacer1
                css
                    height 130px
            div title
                text text
                    val audiU
                    class stretch
                    css
                        padding-top 15px
                        display inline-block
                        color white
                        font-size 70px
                        //font-size 90px
                        letter-spacing 4px
                        font-family PressStart2P, Barlow
                        font-weight 500
            div spacer2
                css
                    height 5px
            block model_form
                @query window height != 0
                    {
                        var bottom_space = 50 * 2.7;
                        var height = window.innerHeight - (100 + 10 + block.sibling('title').$().height() + bottom_space);
                        height = height * 0.8;
                        block.css('height', height + 'px')
                    }
                div page1
                    css
                        display block
                    {
                        block.key('playlist_selections', []);
                    }
                    :hide
                        css
                            display none
                    :show
                        css
                            display block
                    text hook1
                        html hi, i'm audiUâ€”an AI with an ear for audio...
                        css
                            color white
                            font-size 27px
                            display block
                            margin-top 15px
                            line-height 120%
                    text hook2
                        html pick your best playlists and i'll find some fresh tracks you might like!
                        css
                            color white
                            font-size 20px
                            display block
                            margin-top 15px
                            line-height 120%
                            font-style italic
                    div spacer_form
                        css
                            height 20px
                    div image
                        image img
                            height 30px
                            width 30px
                            src img/waveform_w.png
                            class rotating3
                            css
                                margin 0 auto
                                -webkit-transform scaleY(-1)
                                transform scaleY(-1)
                    div spacer2-5
                        css
                            height 10px
                    text prompt
                        val which playlists would you like me to listen to?
                        css
                            color white
                            font-size 35px
                            display block
                            line-height 120%
                    text subprompt
                        html [&nbsp;spotify playlist link, ie. <a class='link-white' style='font-weight:bold;' target='_blank' href='https://open.spotify.com/playlist/5ghFHvZmV4FDK5YLeZQRu9'>https://open.spotify.com/playlist/5ghFHvZmV4FDK5YLeZQRu9</a>&nbsp;]
                        css
                            color white
                            font-size 17px
                            display block
                            margin-top 15px
                            line-height 120%
                            width 90%
                            max-width 700px
                            margin-left auto
                            margin-right auto
                            //font-style italic
                    input playlist_input
                        placeholder https://open.spotify.com/playlist/5ghFHvZmV4FDK5YLeZQRu9
                        class playlist-input
                        #value
                            {
                                block.node().value = value;
                            }
                        :input
                            {
                                block.sibling('extra_inputs').key('refocus', 0).on('update_num_inputs');
                            }
                    div extra_inputs
                        {
                            block.key('refocus', 0);
                        }
                        :update_num_inputs
                            {
                                var generate_input_block = (num, text = '') => {
                                    var bl = Block('input', `input_${num}`);
                                    bl.attribute('placeholder', 'another playlist...');
                                    bl.node().value = text;
                                    bl.on('input', (e, b, d) => {
                                        block.key('refocus', num);
                                        block.on('update_num_inputs');
                                    });
                                    bl.class('playlist-input');
                                    return bl;
                                };
                                var input_vals = [];
                                var first_val = block.sibling('playlist_input').node().value;
                                if (first_val && (`${first_val}`).trim() != '') {
                                    input_vals.push((`${first_val}`).trim());
                                }
                                var children = block.children();
                                for (var c in children) {
                                    if (children[c].mark().includes('input_')) {
                                        var child_val = children[c].node().value;
                                        if (child_val && (`${child_val}`).trim().length > 0) {
                                            input_vals.push((`${child_val}`).trim());
                                        }
                                    }
                                }
                                if (input_vals.length <= 0) {
                                    block.sibling('playlist_input').data({ value: '' });
                                    block.on('empty');
                                    return;
                                }
                                block.html('');
                                input_vals.push('');
                                block.sibling('playlist_input').data({ value: input_vals[0] });
                                for (var i = 1; i < input_vals.length; i++) {
                                    block.add(generate_input_block(i, input_vals[i]));
                                }
                                setTimeout(_ => {
                                    var refocus_num = block.key('refocus');
                                    var refocus_b = null;
                                    if (refocus_num > 0) {
                                        refocus_b = block.child(`input_${refocus_num}`);
                                    } else {
                                        refocus_b = block.sibling('playlist_input');;
                                    }
                                    if (refocus_b) refocus_b.node().focus();
                                }, 10);
                            }
                        :empty
                            {
                                block.html('').add(Block('div', 'spacer').css('height', '5px'));
                                event.stopPropagation();
                            }
                        div spacer
                            height 5px
                    button submit_btn
                        html GO
                        css
                            background-color #222
                            font-size 17px
                            letter-spacing 2px
                            height 50px
                            width 100px
                            border-radius 3px
                            opacity 0.9
                            color white
                            outline none
                        {
                            if (!util.mobileAndTablet()) {
                                block.class('mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--colored');
                            } else block.css('border', 'none');
                        }
                        :click
                            {
                                var values = [];
                                var value_first = block.sibling('playlist_input').node().value;
                                if (value_first && (`${value_first}`).trim().length > 0)
                                    values.push(value_first);
                                var extra_inputs = block.sibling('extra_inputs').children();
                                for (var c in extra_inputs) {
                                    if (extra_inputs[c].mark().includes('input_')) {
                                        var value_next = extra_inputs[c].node().value;
                                        if (value_next && (`${value_next}`).trim().length > 0)
                                            values.push(value_next);
                                    }
                                }
                                console.log("selected playlists: ");
                                console.log(values);
                                block.parent().key('playlist_selections', values);
                                if (values.length > 0) {
                                    block.parent().on('hide')
                                        .sibling('page2').on('show');
                                    window.history.pushState({
                                        origin: `${window.location.origin}`,
                                        form_stage: 2
                                    }, "", `${window.location.href}`);
                                }
                                event.stopPropagation();
                            }
                div page2
                    {
                        block.key('genre_selections', []);
                    }
                    #genre_form_select_mode
                        {
                            if (genre_form_select_mode == 'bubbles') {
                                block.child('genre_input').on('hide');
                                block.child('extra_inputs').on('hide');
                                block.child('genre_bubbles').on('show');
                                block.child('spacer2').on('show');
                                block.child('spacer1').on('show');
                                block.child('spacer0').on('show');
                                block.child('subprompt').on('hide');
                            } else if (genre_form_select_mode == 'text') {
                                block.child('genre_bubbles').on('hide');
                                block.child('genre_input').on('show');
                                block.child('extra_inputs').on('show');
                                block.child('spacer2').on('hide');
                                block.child('spacer1').on('hide');
                                block.child('spacer0').on('hide');
                                block.child('subprompt').on('show');
                            }
                            
                        }
                    :hide
                        css
                            display none
                        {
                            event.stopPropagation();
                        }
                    :show
                        css
                            display block
                        {
                            event.stopPropagation();
                        }
                    css
                        display none
                        margin 0 auto
                    div spacer0
                        css
                            height 40px
                        :hide
                            css
                                display none
                            {
                                event.stopPropagation();
                            }
                        :show
                            css
                                display block
                            {
                                event.stopPropagation();
                            }
                    text hook1
                        html i like what i'm hearing already!
                        css
                            color white
                            font-size 27px
                            display block
                            margin-top 15px
                            line-height 120%
                    text hook2
                        html pick your top 5 genres to help me narrow down the search!
                        css
                            color white
                            font-size 20px
                            display block
                            margin-top 15px
                            line-height 120%
                            font-style italic
                    div spacer_form
                        css
                            height 20px
                    div image
                        image img
                            height 30px
                            width 30px
                            src img/waveform_w.png
                            class rotating2_n
                            css
                                margin 0 auto
                                -webkit-transform scaleY(-1)
                                transform scaleY(-1)
                    div spacer2-5
                        css
                            height 10px
                    text prompt
                        val while i'm listening, what's your vibe?
                        css
                            color white
                            font-size 35px
                            display block
                            line-height 120%
                    text subprompt
                        {
                            block.html(`[&nbsp; <b>genres:</b> ${app.main.get_genre_list_str()} &nbsp;]`);
                        }
                        :hide
                            css
                                display none
                            {
                                event.stopPropagation();
                            }
                        :show
                            css
                                display block
                            {
                                event.stopPropagation();
                            }
                        css
                            color white
                            font-size 17px
                            display none
                            margin-top 15px
                            line-height 120%
                            width 90%
                            max-width 800px
                            margin-left auto
                            margin-right auto
                            //font-style italic
                    div spacer1
                        :hide
                            css
                                display none
                            {
                                event.stopPropagation();
                            }
                        :show
                            css
                                display block
                            {
                                event.stopPropagation();
                            }
                        css
                            height 20px
                    div genre_bubbles
                        css
                            height auto
                            width 80%
                            max-width 700px
                            margin 0 auto
                        :hide
                            css
                                display none
                            {
                                event.stopPropagation();
                            }
                        :show
                            css
                                display block
                            {
                                event.stopPropagation();
                            }
                        :obtain_genres
                            {
                                var active_genre_list = [];
                                var children = block.children();
                                for (var c in children) {
                                    if (children[c].type() == 'genre-bubble') {
                                        if (children[c].child('button').key('active') == 'yes') {
                                            active_genre_list.push(children[c].key('slug'));
                                        }
                                    }
                                }
                                if (data.callback) data.callback(active_genre_list);
                            }
                        {
                            var genres_list = app.main.get_genre_list();
                            for (var g in genres_list) {
                                var genre_text = genres_list[g];
                                var genre_slug = app.main.reverse_genre_correction(genre_text);
                                //console.log(genre_text, genre_slug);
                                var genre_view = Block('genre-bubble', `bubble_${genre_slug}`).data({
                                    'text': genre_text,
                                    'slug': genre_slug
                                });
                                block.add(genre_view);
                            }
                        }
                    div spacer2
                        :hide
                            css
                                display none
                            {
                                event.stopPropagation();
                            }
                        :show
                            css
                                display block
                            {
                                event.stopPropagation();
                            }
                        css
                            height 20px
                    input genre_input
                        css 
                            display none
                        :hide
                            css
                                display none
                            {
                                event.stopPropagation();
                            }
                        :show
                            css
                                display block
                            {
                                event.stopPropagation();
                            }
                        {
                            var genres_list = app.main.get_genre_list();
                            block.attribute('placeholder', `${genres_list[util.rand_int(0, genres_list.length - 1)]}`);
                        }
                        class genre-input
                        #value
                            {
                                block.node().value = value;
                            }
                        :input
                            {
                                //if (event.keyCode == 13) {
                                    block.sibling('extra_inputs').key('refocus', 0).on('update_num_inputs', { genres_filter_enable: false });
                                //}
                            }
                    div extra_inputs
                        css
                            display none
                        :hide
                            css
                                display none
                            {
                                event.stopPropagation();
                            }
                        :show
                            css
                                display block
                            {
                                event.stopPropagation();
                            }
                        {
                            block.key('refocus', 0);
                        }
                        :update_num_inputs
                            {
                                var genres_filter_enable = data.genres_filter_enable;
                                var genres_list = app.main.get_genre_list();
                                var generate_input_block = (num, text = '') => {
                                    var bl = Block('input', `input_${num}`);
                                    bl.attribute('placeholder', `${genres_list[util.rand_int(0, genres_list.length - 1)]}`);
                                    bl.node().value = text;
                                    bl.on('input', (e, b, d) => {
                                        //if (e.keyCode == 13) {
                                            block.key('refocus', num);
                                            block.on('update_num_inputs', { genres_filter_enable: false });
                                        //}
                                    });
                                    bl.class('genre-input');
                                    return bl;
                                };
                                var input_vals = [];
                                var first_val = block.sibling('genre_input').node().value;
                                if (first_val && (`${first_val}`).trim() != '') {
                                    if (!genres_filter_enable || genres_list.includes(first_val)) {
                                        input_vals.push((`${first_val}`));
                                    }
                                }
                                var children = block.children();
                                for (var c in children) {
                                    if (children[c].mark().includes('input_')) {
                                        var child_val = children[c].node().value;
                                        if (child_val && (`${child_val}`).trim().length > 0) {
                                            if (!genres_filter_enable || genres_list.includes(child_val)) {
                                                input_vals.push((`${child_val}`));
                                            }
                                        }
                                    }
                                }
                                if (input_vals.length <= 0) {
                                    block.sibling('genre_input').data({ value: first_val });
                                    block.sibling('genre_input').data({ value: '' });
                                    block.on('empty');
                                    return;
                                }
                                block.html('');
                                input_vals.push('');
                                block.sibling('genre_input').data({ value: input_vals[0] });
                                for (var i = 1; i < input_vals.length; i++) {
                                    block.add(generate_input_block(i, input_vals[i]));
                                }
                                setTimeout(_ => {
                                    var refocus_num = block.key('refocus');
                                    var refocus_b = null;
                                    if (refocus_num > 0) {
                                        refocus_b = block.child(`input_${refocus_num}`);
                                    } else {
                                        refocus_b = block.sibling('genre_input');
                                    }
                                    if (refocus_b) {
                                        alert(`${refocus_b.mark()}`);
                                        if (!util.mobileAndTablet())
                                            refocus_b.node().focus();
                                        else refocus_b.node().click();
                                    }
                                }, 10);
                            }
                        :empty
                            {
                                block.html('').add(Block('div', 'spacer').css('height', '5px'));
                                event.stopPropagation();
                            }
                        div spacer
                            height 5px
                    button submit_btn
                        html GO
                        css
                            background-color #222
                            font-size 17px
                            letter-spacing 2px
                            height 50px
                            width 100px
                            border-radius 3px
                            opacity 0.9
                            color white
                            outline none
                        {
                            if (!util.mobileAndTablet()) {
                                block.class('mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--colored');
                            } else block.css('border', 'none');
                        }
                        :click
                            {
                                var genres_list = app.main.get_genre_list();
                                var _next = _ => {
                                    block.sibling('genre_bubbles').on('obtain_genres', { callback: (values) => {
                                        console.log("selected genres: ");
                                        console.log(values);
                                        block.parent().key('genre_selections', values);
                                        var min_genre_lim = app.main.config.dataset.config.min_genres;
                                        if (values.length < min_genre_lim) {
                                            app.ui.display_modal.generic_confirm('Not Enough Vibes', `Please choose at least ${min_genre_lim} genres!`, (s) => {
                                                //console.log(s);
                                            });
                                        } else {
                                            block.parent().on('hide')
                                                .sibling('page3').on('show');
                                            window.history.pushState({
                                                origin: `${window.location.origin}`,
                                                form_stage: 3
                                            }, "", `${window.location.href}`);
                                        }
                                    }});
                                };
                                setTimeout(_next, 50);
                                event.stopPropagation();
                            }
                        :click_old
                            {
                                var genres_list = app.main.get_genre_list();
                                block.sibling('extra_inputs').on('update_num_inputs', { genres_filter_enable: true });
                                var _next = _ => {
                                    var values = [];
                                    var value_first = block.sibling('genre_input').node().value;
                                    if (value_first && (`${value_first}`).trim().length > 0) {
                                        if (genres_list.includes(value_first))
                                            values.push(value_first);
                                    }
                                    var extra_inputs = block.sibling('extra_inputs').children();
                                    for (var c in extra_inputs) {
                                        if (extra_inputs[c].mark().includes('input_')) {
                                            var value_next = extra_inputs[c].node().value;
                                            if (value_next && (`${value_next}`).trim().length > 0)
                                                if (genres_list.includes(value_next))
                                                    values.push(value_next);
                                        }
                                    }
                                    console.log("selected genres: ");
                                    console.log(values);
                                    block.parent().key('genre_selections', values);
                                    var min_genre_lim = app.main.config.dataset.config.min_genres;
                                    if (values.length < min_genre_lim) {
                                        app.ui.display_modal.generic_confirm('Not Enough Vibes', `Please choose at least ${min_genre_lim} genres!`, (s) => {
                                            //console.log(s);
                                        });
                                    } else {
                                        block.parent().on('hide')
                                            .sibling('page3').on('show');
                                    }
                                };
                                setTimeout(_next, 50);
                                event.stopPropagation();
                            }
                div page3
                    {
                        block.key('genre_selections', []);
                    }
                    :hide
                        css
                            display none
                    :show
                        css
                            display block
                    css
                        display none
                        margin 0 auto
                    text hook1
                        html one last thing â€” pick my brain...
                        css
                            color white
                            font-size 27px
                            display block
                            margin-top 15px
                            line-height 120%
                    text hook2
                        html as an AI i have a few different brainsâ€”which one should i use?
                        css
                            color white
                            font-size 20px
                            display block
                            margin-top 15px
                            line-height 120%
                            font-style italic
                    div spacer_form
                        css
                            height 20px
                    div image
                        image img
                            height 30px
                            width 30px
                            src img/waveform_w.png
                            class rotating2_n
                            css
                                margin 0 auto
                                -webkit-transform scaleY(-1)
                                transform scaleY(-1)
                    div spacer2-5
                        css
                            height 10px
                    select model_selector
                        css
                            display block
                            margin 0 auto
                            width 90%
                            max-width 400px
                            height 50px
                            padding 10px 10px
                            box-sizing border-box
                            margin-top 15px
                            margin-bottom 30px
                            border-radius 4px
                            cursor pointer
                            outline none
                            background-color #202020
                            border 1px solid #444
                            color white
                            font-size 18px
                        {
                            for (var model_slug in app.main.config.dataset.models) {
                                var model_name = app.main.config.dataset.models[model_slug];
                                // console.log(model_slug, model_name);
                                var option_line = `${model_name} â€” ${model_slug.replaceAll('_', ' ')}`;
                                block.add(Block('option', `option_${model_slug}`)
                                    .attribute('value', `${model_slug}`)
                                    .html(`${option_line}`)
                                );
                            }
                        }
                    button submit_btn
                        html GO
                        css
                            background-color #222
                            font-size 17px
                            letter-spacing 2px
                            height 50px
                            width 100px
                            border-radius 3px
                            opacity 0.9
                            color white
                            outline none
                        {
                            if (!util.mobileAndTablet()) {
                                block.class('mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--colored');
                            } else block.css('border', 'none');
                        }
                        :click
                            {
                                var selected_model = block.sibling('model_selector').node().value;
                                if (selected_model && (`${selected_model}`).trim().length > 0) {
                                    // gather all data
                                    var playlist_selections = block.parent().sibling('page1').key('playlist_selections');
                                    var genre_selections = block.parent().sibling('page2').key('genre_selections');
                                    console.log(selected_model, playlist_selections, genre_selections);
                                    app.web.api.generate_recommendations(selected_model, playlist_selections, genre_selections, (data) => {
                                        console.log('model running');
                                        console.log(data);
                                        if (data.hasOwnProperty('run_id') && data.run_id) {
                                            var run_id = data.run_id;
                                            var new_loc = `/fresh?r=${run_id}`;
                                            setTimeout(_ => {
                                                util.redirect(new_loc);
                                            }, 500);
                                        }
                                    });
                                    block.parent().on('hide')
                                        .sibling('page4').on('show');
                                    window.history.pushState({
                                        origin: `${window.location.origin}`,
                                        form_stage: 4
                                    }, "", `${window.location.href}`);
                                }
                                event.stopPropagation();
                            }
                div page4
                    :hide
                        css
                            display none
                    :show
                        css
                            display block
                    css
                        display none
                        margin 0 auto
                    div spacer_form
                        css
                            height 20px
                    div image
                        image img
                            height 40px
                            width 40px
                            src img/waveform_w.png
                            class rotating1
                            css
                                margin 0 auto
                                -webkit-transform scaleY(-1)
                                transform scaleY(-1)
                    div spacer2-5
                        css
                            height 10px
                div results
                    :hide
                        css
                            display none
                    :show
                        css
                            display block
                    css
                        display none
                        margin 40px auto 10px
                    div spacer_form
                        css
                            height 20px
                    #target_run_id
                        {
                            app.web.api.check_recommendations_status(target_run_id, (data) => {
                                if (data.run_id == target_run_id) {
                                    //console.log(data);
                                    if (data.run_status == "created" || data.run_status == "running") {
                                        block.child('data_out_prep/results_loading').on('show');
                                        block.child('data_out_prep/subtext').on('show');
                                        app.ws.api.subscribe_run_updates(target_run_id);
                                    } else if (data.run_status == "complete") {
                                        block.child('data_out_prep').css('display', 'none');
                                        block.child('data_out')
                                            .data({
                                                tracklist: data.inference_output,
                                                results_ratio: data.inference_ratio,
                                                run_length: data.run_length,
                                                timing: data.ts_profile,
                                                accuracy: data.validation_accuracy,
                                                model_type: data.model_type,
                                                playlist_names: data.playlist_names,
                                                genre_selections: data.genre_selections
                                            }).on('show')
                                        ;
                                        // console.log(data);
                                    } else if (data.run_status == "error") {
                                        block.child('data_out_prep/results_loading/text').html('').data('sorry about that!');
                                        block.child('data_out_prep/subtext').html('').html('an AI error occurred...<br/><span style="font-size: 14px;">please head back and try again</span>');
                                        block.child('data_out_prep/results_loading').on('show');
                                        block.child('data_out_prep/subtext').on('show');
                                    }
                                }
                            });
                        }
                    block data_out_prep
                        css
                            width 80%
                            max-width 600px
                            height 300px
                            background-color rgba(200,200,200,0)
                            border-radius 6px
                            border 1px solid rgba(200,200,200,0)
                            margin 0 auto
                        div spacer0
                            css
                                height 10px
                        div results_loading
                            css
                                display none
                                opacity 0
                                transition opacity 0.35s ease
                            :show
                                {
                                    block.css('display', 'block');
                                    setTimeout(_ => {
                                        block.css('opacity', '1');
                                    }, 50);
                                }
                            :hide
                                {
                                    setTimeout(_ => {
                                        block.css('opacity', '0');
                                        setTimeout(_ => {
                                            block.css('display', 'none');
                                        }, 360);
                                    }, 50);
                                }
                            text text
                                val i'm still listening!
                                css
                                    color #fafafa
                                    font-size 24px
                                    letter-spacing 0.7px
                        div spacer1
                            css
                                height 30px
                        div image
                            image img
                                height 50px
                                width 50px
                                src img/loading_ellipsis_slow.svg
                                class rotating2_n
                                css
                                    margin 0 auto
                                    -webkit-transform scaleY(-1)
                                    transform scaleY(-1)
                                {
                                    // flip loading image
                                    var switch_interval = 5;
                                    var rot_int = 2;
                                    var negative = true;
                                    setInterval(_ => {
                                        var className = `rotating${rot_int}${(negative ? '_n' : '')}`;
                                        block.$().removeClass(className);
                                        negative = !negative;
                                        className = `rotating${rot_int}${(negative ? '_n' : '')}`;
                                        block.class(className);
                                    }, switch_interval * 1000)
                                }
                        div spacer2
                            css
                                height 30px
                        text subtext
                            html refresh for results...<br/><span style="font-size: 14px;">or bookmark page and check later</span>
                            css
                                color #f0f0f0
                                font-size 23px
                                letter-spacing 0.5px
                                display none
                                opacity 0
                                transition opacity 0.35s ease
                            :show
                                {
                                    block.css('display', 'block');
                                    setTimeout(_ => {
                                        block.css('opacity', '1');
                                    }, 50);
                                }
                            :hide
                                {
                                    setTimeout(_ => {
                                        block.css('opacity', '0');
                                        setTimeout(_ => {
                                            block.css('display', 'none');
                                        }, 360);
                                    }, 50);
                                }
                    block data_out
                        css
                            width 80%
                            max-width 600px
                            height 600px
                            background-color #1a1a1a
                            border-radius 6px
                            border 1px solid #1f1f1f
                            margin 0 auto
                            display none
                            position relative
                            -webkit-box-shadow 2px 4px 15px 3px rgba(5,5,5,0.2)
                            box-shadow 2px 4px 15px 3px rgba(5,5,5,0.2)
                            display none
                            opacity 0
                            transition opacity 0.4s ease
                        :show
                            {
                                setTimeout(_ => {
                                    block.css('display', 'table');
                                    setTimeout(_ => {
                                        block.css('opacity', '1');
                                    }, 20);
                                }, 10);
                                event.stopPropagation();
                            }
                        #model_type
                            {
                                model_name = 'Smart Model';
                                if (app.main.config.dataset.models)
                                    model_name = app.main.config.dataset.models[model_type];
                                console.log('model_type', model_type, model_name);
                                block.child('title').data({
                                    update: model_name
                                });
                            }
                        #tracklist
                            {
                                console.log('tracklist', tracklist);
                                block.child('content').data({
                                    tracklist: tracklist
                                });
                            }
                        #timing
                            {
                                timing['time_total'] = parseFloat(timing['time_total'])
                                timing['time_training'] = parseFloat(timing['time_training'])
                                timing['time_inference'] = parseFloat(timing['time_inference'])
                                console.log('timing', timing);
                                block.child('details').data(timing);
                            }
                        #run_length
                            {
                                run_length = parseFloat(run_length);
                                console.log('run_length', run_length);
                                block.child('details').data({
                                    run_length: run_length
                                });
                            }
                        #results_ratio
                            {
                                results_ratio[0] = parseFloat(results_ratio[0])
                                results_ratio[1] = parseFloat(results_ratio[1])
                                results_ratio_final = results_ratio[0] / (results_ratio[0] + results_ratio[1])
                                console.log('results_ratio', results_ratio, results_ratio_final);
                                block.child('details').data({
                                    ratio: results_ratio_final
                                });
                            }
                        #accuracy
                            {
                                accuracy = parseFloat(accuracy);
                                console.log('accuracy', accuracy);
                                block.child('details').data({
                                    accuracy: accuracy
                                });
                            }
                        #playlist_names
                            {
                                console.log('playlist_names', playlist_names);
                                block.child('details').data({
                                    playlist_names: playlist_names
                                });
                            }
                        #genre_selections
                            {
                                console.log('genre_selections', genre_selections);
                                block.child('details').data({
                                    genre_selections: genre_selections
                                });
                            }
                        block title
                            css
                                position absolute
                                top 0
                                left 0
                                width 100%
                                height 75px
                                border-bottom 1px solid #1f1f1f
                                box-sizing border-box
                            #update
                                {
                                    block.child('text').html('').data(update);
                                }
                            text text
                                val Model Run
                                css
                                    color #eee
                                    font-size 25px
                                    letter-spacing 0.8px
                        div content
                            css
                                position absolute
                                top 75px
                                left 0
                                width 100%
                                box-sizing border-box
                                overflow-y auto
                                overflow-x none
                                -webkit-overflow-scrolling touch
                            @query window height != 0
                                {
                                    block.css('height', (block.parent().$().height() - block.sibling('title').$().height() - block.sibling('details').$().height() - 2) + 'px');
                                }
                            #tracklist
                                {
                                    block.html('');
                                    for (var t in tracklist) {
                                        var track = tracklist[t];
                                        var track_view = Block('sp-track-view', 'track_' + track.id);
                                        track_view.key('track_obj', track);
                                        var tr_name = track.name.split("(with ")[0].trim().split("(feat.")[0].trim().split("(W/")[0].trim();
                                        var tr_preview = track.preview_url && track.preview_url.trim().length > 0 ? track.preview_url : '';
                                        var tr_artist = track.artist.length > 1 ? (track.artist.join(', ')) : (track.artist[0]);
                                        track_view.data({
                                            id: track.id,
                                            name: tr_name,
                                            album: track.album,
                                            link: track.href,
                                            cover_art: track.cover_art_url,
                                            preview: tr_preview,
                                            artist: tr_artist,
                                        });
                                        block.add(track_view);
                                    }
                                }
                            :pause_all_tracks
                                {
                                    var except = data.hasOwnProperty('except') ? data.except : '';
                                    var children = block.children();
                                    for (var c in children) {
                                        if (children[c].type() == 'sp-track-view' && (except == '' || children[c].mark() != except)) {
                                            var playing = children[c].child('cover_art/player').key('playing');
                                            if (playing && playing == 'true') {
                                                children[c].child('cover_art/player/play_button').on('click', { automated: true });
                                            }
                                        }
                                    }
                                }
                            sp-track-view example_track
                                id sampleID_abcdefg
                                name Track Name
                                artist Track Artist
                                album Track Album
                                link http://spotify.com
                                //preview https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQNYn6ru1tFjLlJmddZ_xIjEPrK8isac41Opg&usqp=CAU
                        block details
                            css
                                position absolute
                                bottom 0
                                left 0
                                width 100%
                                height 80px
                                border-top 1px solid #1f1f1f
                                box-sizing border-box
                            {
                                block.key('accuracy', 70.0);
                                block.key('ratio', 15.0);
                                block.key('run_length', 0.0);
                                block.key('time_training', 0.0);
                                block.key('time_inference', 0.0);
                                block.key('time_total', 0.0);
                                block.key('playlist_names', []);
                                block.key('genre_selections', []);

                                block.key('info_state', 'input');
                            }
                            #accuracy
                                {
                                    block.key('accuracy', accuracy);
                                    block.on('update_text');
                                }
                            #ratio
                                {
                                    block.key('ratio', ratio);
                                    block.on('update_text');
                                }
                            #run_length
                                {
                                    block.key('run_length', run_length);
                                    block.on('update_text');
                                }
                            #time_training
                                {
                                    block.key('time_training', time_training);
                                    block.on('update_text');
                                }
                            #time_inference
                                {
                                    block.key('time_inference', time_inference);
                                    block.on('update_text');
                                }
                            #time_total
                                {
                                    block.key('time_total', time_total);
                                    block.on('update_text');
                                }
                            #playlist_names
                                {
                                    block.key('playlist_names', playlist_names);
                                    block.on('update_text');
                                }
                            #genre_selections
                                {
                                    block.key('genre_selections', genre_selections);
                                    block.on('update_text');
                                }
                            :update_text
                                {
                                    var text = '';
                                    var info_state = block.key('info_state');
                                    if (info_state == 'output') {
                                        var accuracy = block.key('accuracy').toFixed(2);
                                        var ratio = block.key('ratio').toFixed(2);
                                        var run_length = block.key('run_length').toFixed(2);
                                        var time_training = block.key('time_training').toFixed(3);
                                        var time_inference = block.key('time_inference').toFixed(3);
                                        text = `Accuracy ${accuracy}%&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;Ratio ${ratio}%<br/>${run_length}s total&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;${time_training}s learn + ${time_inference}s gen`;
                                    } else if (info_state == 'input') {
                                        var playlist_names = block.key('playlist_names').join(', ');
                                        var genre_selections = app.main.genre_correction(block.key('genre_selections').join(', '));
                                        text = `Playlists: ${playlist_names}<br/>Genres: ${genre_selections}`;
                                    }
                                    block.child('text').html('').html(text);
                                }
                            text text
                                html Accuracy __%&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;Ratio __%<br/>__s total&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;__s learn + __s gen
                                css
                                    color #eee
                                    font-size 14px
                                    letter-spacing 0.7px
                    div spacer2-5
                        css
                            height 10px
            div spacer3
                css
                    height 50px 
            div spacer4
                css
                    height 100px 
        block modal
            css
                position fixed
                top 0
                left 0
                height 100%
                width 100%
                z-index 100
                background-color rgba(5,5,5,0.6)
                transition opacity 0.35s ease
                display none
                opacity 0
            :show
                {
                    block.css('display', 'table');
                    setTimeout(_ => {
                        block.css('opacity', '1');
                    }, 100);
                }
            :hide
                {
                    setTimeout(_ => {
                        block.css('opacity', '0');
                        setTimeout(_ => {
                            block.css('display', 'none');
                        }, 360);
                    }, 10);
                }
            :click
                {
                    block.on('hide');
                }
            div modal_content
                css
                    width 80%
                    max-width 600px
                    height 90%
                    max-height 700px
                    background-color #111
                    border 1px solid #161616
                    border-radius 8px
                    margin 0 auto
                    -webkit-box-shadow 2px 4px 15px 3px rgba(5,5,5,0.2)
                    box-shadow 2px 4px 15px 3px rgba(5,5,5,0.2)
                    padding 20px 50px 20px 50px
                    box-sizing border-box
                class readme_modal
                :click
                    {
                        event.stopPropagation();
                    }
                #raw_html
                    {
                        block.child('modal_subcontent').html(raw_html);
                    }
                div modal_subcontent
                    css
                        width 100%
                        height 100%
                        overflow-x hidden
                        overflow-y auto
                        color white
                        text-align left
        div footer
            block github
                css
                    position fixed
                    bottom 0
                    right 0
                    height 80px
                    width 90px
                a link
                    href https://github.com/anuvgupta/audiu
                    target _blank
                    image img
                        src /img/github_w.png
                        height 40px
                        width 40px
                        css
                            margin 0 auto
                    css
                        opacity 0.2
                        cursor pointer
                        transition 0.2s ease
                    :mouseover
                        css
                            opacity 0.8
                    :mouseout
                        css
                            opacity 0.2
            block info
                css
                    position fixed
                    bottom 0
                    left 0
                    height 80px
                    width 90px
                image img
                    src /img/info_w.png
                    height 45px
                    width 45px
                    css
                        opacity 0.2
                        cursor pointer
                        transition 0.2s ease
                        margin 0 auto
                    :mouseover
                        css
                            opacity 0.8
                    :mouseout
                        css
                            opacity 0.2
                    :click
                        {
                            block.parent(1).sibling('modal').on('show');
                        }

